public final class leakcanary/AndroidDetectLeaksAssert : leakcanary/DetectLeaksAssert {
	public fun <init> ()V
	public fun <init> (Lleakcanary/HeapAnalysisReporter;)V
	public synthetic fun <init> (Lleakcanary/HeapAnalysisReporter;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun assertNoLeaks (Ljava/lang/String;)V
}

public final class leakcanary/DetectLeaksAfterTestSuccess : org/junit/rules/TestRule {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun apply (Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;)Lorg/junit/runners/model/Statement;
}

public abstract interface class leakcanary/DetectLeaksAssert {
	public static final field Companion Lleakcanary/DetectLeaksAssert$Companion;
	public abstract fun assertNoLeaks (Ljava/lang/String;)V
}

public final class leakcanary/DetectLeaksAssert$Companion {
	public final fun update (Lleakcanary/DetectLeaksAssert;)V
}

public abstract interface class leakcanary/HeapAnalysisReporter {
	public abstract fun reportHeapAnalysis (Lshark/HeapAnalysis;)V
}

public final class leakcanary/InstrumentationLeakDetector {
	public static final field Companion Lleakcanary/InstrumentationLeakDetector$Companion;
	public fun <init> ()V
	public final fun detectLeaks ()Lleakcanary/InstrumentationLeakDetector$Result;
}

public final class leakcanary/InstrumentationLeakDetector$Companion {
	public final fun updateConfig ()V
}

public abstract class leakcanary/InstrumentationLeakDetector$Result {
}

public final class leakcanary/InstrumentationLeakDetector$Result$AnalysisPerformed : leakcanary/InstrumentationLeakDetector$Result {
	public fun <init> (Lshark/HeapAnalysis;)V
	public final fun getHeapAnalysis ()Lshark/HeapAnalysis;
}

public final class leakcanary/InstrumentationLeakDetector$Result$NoAnalysis : leakcanary/InstrumentationLeakDetector$Result {
	public fun <init> (Ljava/lang/String;)V
	public final fun getReason ()Ljava/lang/String;
}

public final class leakcanary/LeakAssertions {
	public static final field INSTANCE Lleakcanary/LeakAssertions;
	public static final field NO_TAG Ljava/lang/String;
	public final fun assertNoLeaks (Ljava/lang/String;)V
	public static synthetic fun assertNoLeaks$default (Lleakcanary/LeakAssertions;Ljava/lang/String;ILjava/lang/Object;)V
}

public final class leakcanary/NoLeakAssertionFailedError : java/lang/AssertionError {
	public static final field Companion Lleakcanary/NoLeakAssertionFailedError$Companion;
	public fun <init> (Lshark/HeapAnalysisSuccess;)V
	public final fun getHeapAnalysis ()Lshark/HeapAnalysisSuccess;
}

public final class leakcanary/NoLeakAssertionFailedError$Companion {
	public final fun throwOnApplicationLeaks ()Lleakcanary/HeapAnalysisReporter;
}

public abstract interface annotation class leakcanary/SkipLeakDetection : java/lang/annotation/Annotation {
	public static final field Companion Lleakcanary/SkipLeakDetection$Companion;
	public abstract fun assertionTags ()[Ljava/lang/String;
	public abstract fun message ()Ljava/lang/String;
}

public final class leakcanary/SkipLeakDetection$Companion {
	public final fun shouldSkipTest (Ljava/lang/String;Lleakcanary/SkipLeakDetection;Ljava/lang/String;)Z
	public final fun shouldSkipTest (Lorg/junit/runner/Description;Ljava/lang/String;)Z
}

public final class leakcanary/TestDescriptionHolder : org/junit/rules/TestRule {
	public static final field INSTANCE Lleakcanary/TestDescriptionHolder;
	public fun apply (Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;)Lorg/junit/runners/model/Statement;
	public final fun getTestDescription ()Lorg/junit/runner/Description;
	public final fun isEvaluating ()Z
}

