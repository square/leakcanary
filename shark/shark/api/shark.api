public final class shark/ActualMatchingReferenceReaderFactory : shark/ReferenceReader$Factory {
	public fun <init> (Ljava/util/List;)V
	public fun createFor (Lshark/HeapGraph;)Lshark/ReferenceReader;
}

public final class shark/AndroidNativeSizeMapper {
	public static final field Companion Lshark/AndroidNativeSizeMapper$Companion;
	public fun <init> (Lshark/HeapGraph;)V
	public final fun mapNativeSizes ()Ljava/util/Map;
}

public final class shark/AndroidNativeSizeMapper$Companion {
	public final fun mapNativeSizes (Lshark/HeapGraph;)Ljava/util/Map;
}

public final class shark/AndroidObjectSizeCalculator : shark/DominatorTree$ObjectSizeCalculator {
	public fun <init> (Lshark/HeapGraph;)V
	public fun computeSize (J)I
}

public final class shark/AndroidReferenceReaderFactory : shark/ReferenceReader$Factory {
	public fun <init> (Ljava/util/List;)V
	public fun createFor (Lshark/HeapGraph;)Lshark/ReferenceReader;
}

public abstract class shark/AndroidReferenceReaders : java/lang/Enum, shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader$OptionalFactory {
	public static final field ACTIVITY_THREAD__NEW_ACTIVITIES Lshark/AndroidReferenceReaders;
	public static final field ANIMATOR_WEAK_REF_SUCKS Lshark/AndroidReferenceReaders;
	public static final field ARRAY_SET Lshark/AndroidReferenceReaders;
	public static final field Companion Lshark/AndroidReferenceReaders$Companion;
	public static final field MESSAGE_QUEUE Lshark/AndroidReferenceReaders;
	public static final field SAFE_ITERABLE_MAP Lshark/AndroidReferenceReaders;
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/AndroidReferenceReaders;
	public static fun values ()[Lshark/AndroidReferenceReaders;
}

public final class shark/AndroidReferenceReaders$Companion {
}

public abstract class shark/ApacheHarmonyInstanceRefReaders : java/lang/Enum, shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader$OptionalFactory {
	public static final field ARRAY_LIST Lshark/ApacheHarmonyInstanceRefReaders;
	public static final field COPY_ON_WRITE_ARRAY_LIST Lshark/ApacheHarmonyInstanceRefReaders;
	public static final field HASH_MAP Lshark/ApacheHarmonyInstanceRefReaders;
	public static final field HASH_SET Lshark/ApacheHarmonyInstanceRefReaders;
	public static final field LINKED_LIST Lshark/ApacheHarmonyInstanceRefReaders;
	public static final field WEAK_HASH_MAP Lshark/ApacheHarmonyInstanceRefReaders;
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/ApacheHarmonyInstanceRefReaders;
	public static fun values ()[Lshark/ApacheHarmonyInstanceRefReaders;
}

public final class shark/AppSingletonInspector : shark/ObjectInspector {
	public fun <init> ([Ljava/lang/String;)V
	public fun inspect (Lshark/ObjectReporter;)V
}

public final class shark/ApplicationLeak : shark/Leak {
	public static final field Companion Lshark/ApplicationLeak$Companion;
	public fun <init> (Ljava/util/List;)V
	public final fun component1 ()Ljava/util/List;
	public final fun copy (Ljava/util/List;)Lshark/ApplicationLeak;
	public static synthetic fun copy$default (Lshark/ApplicationLeak;Ljava/util/List;ILjava/lang/Object;)Lshark/ApplicationLeak;
	public fun equals (Ljava/lang/Object;)Z
	public fun getLeakTraces ()Ljava/util/List;
	public fun getShortDescription ()Ljava/lang/String;
	public fun getSignature ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ApplicationLeak$Companion {
}

public final class shark/ByteSize : java/lang/Comparable {
	public static final field BYTES_PER_GB J
	public static final field BYTES_PER_KB J
	public static final field BYTES_PER_MB J
	public static final field Companion Lshark/ByteSize$Companion;
	public static final synthetic fun box-impl (J)Lshark/ByteSize;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo-rK2stxE (J)I
	public static fun compareTo-rK2stxE (JJ)I
	public static final fun div-BWD4q2E (JJ)J
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (JLjava/lang/Object;)Z
	public static final fun equals-impl0 (JJ)Z
	public final fun getInWholeBytes ()J
	public static final fun getInWholeGigabytes-impl (J)J
	public static final fun getInWholeKilobytes-impl (J)J
	public static final fun getInWholeMegabytes-impl (J)J
	public fun hashCode ()I
	public static fun hashCode-impl (J)I
	public static final fun minus-BWD4q2E (JJ)J
	public static final fun plus-BWD4q2E (JJ)J
	public static final fun times-BWD4q2E (JJ)J
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (J)Ljava/lang/String;
	public final synthetic fun unbox-impl ()J
}

public final class shark/ByteSize$Companion {
	public final fun getBytes-1A9dbZA (I)J
	public final fun getBytes-1A9dbZA (J)J
	public final fun getGigabytes-1A9dbZA (I)J
	public final fun getGigabytes-1A9dbZA (J)J
	public final fun getKilobytes-1A9dbZA (I)J
	public final fun getKilobytes-1A9dbZA (J)J
	public final fun getMegabytes-1A9dbZA (I)J
	public final fun getMegabytes-1A9dbZA (J)J
	public final fun getZERO-UyN4wxk ()J
}

public final class shark/ChainingInstanceReferenceReader : shark/ReferenceReader {
	public fun <init> (Ljava/util/List;Lshark/FlatteningPartitionedInstanceReferenceReader;Lshark/FieldInstanceReferenceReader;)V
	public fun read (Lshark/HeapObject$HeapInstance;)Lkotlin/sequences/Sequence;
	public synthetic fun read (Lshark/HeapObject;)Lkotlin/sequences/Sequence;
}

public abstract interface class shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader : shark/ReferenceReader {
	public abstract fun getReadsCutSet ()Z
	public abstract fun matches (Lshark/HeapObject$HeapInstance;)Z
}

public abstract interface class shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader$ChainFactory {
	public abstract fun createFor (Lshark/HeapGraph;)Ljava/util/List;
}

public abstract interface class shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader$OptionalFactory {
	public abstract fun create (Lshark/HeapGraph;)Lshark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader;
}

public final class shark/ClassReferenceReader : shark/ReferenceReader {
	public fun <init> (Lshark/HeapGraph;Ljava/util/List;)V
	public fun read (Lshark/HeapObject$HeapClass;)Lkotlin/sequences/Sequence;
	public synthetic fun read (Lshark/HeapObject;)Lkotlin/sequences/Sequence;
}

public final class shark/DominatorTree {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun buildFullDominatorTree (Lshark/DominatorTree$ObjectSizeCalculator;)Ljava/util/Map;
	public final fun computeRetainedSizes (Ljava/util/Set;Lshark/DominatorTree$ObjectSizeCalculator;)Ljava/util/Map;
	public final fun contains (J)Z
	public final fun updateDominated (JJ)Z
	public final fun updateDominatedAsRoot (J)Z
}

public abstract interface class shark/DominatorTree$ObjectSizeCalculator {
	public abstract fun computeSize (J)I
}

public final class shark/Dominators : java/io/Serializable {
	public fun <init> (Ljava/util/Map;)V
	public final fun getDominatorNodes ()Ljava/util/Map;
}

public final class shark/FieldInstanceReferenceReader : shark/ReferenceReader {
	public fun <init> (Lshark/HeapGraph;Ljava/util/List;)V
	public fun read (Lshark/HeapObject$HeapInstance;)Lkotlin/sequences/Sequence;
	public synthetic fun read (Lshark/HeapObject;)Lkotlin/sequences/Sequence;
}

public final class shark/FilteringLeakingObjectFinder : shark/LeakingObjectFinder {
	public fun <init> (Ljava/util/List;)V
	public fun findLeakingObjectIds (Lshark/HeapGraph;)Ljava/util/Set;
}

public abstract interface class shark/FilteringLeakingObjectFinder$LeakingObjectFilter {
	public abstract fun isLeakingObject (Lshark/HeapObject;)Z
}

public final class shark/FirstHeapTraversal : shark/HeapTraversalOutput {
	public fun <init> (Lshark/ShortestPathObjectNode;Lshark/InitialState;)V
	public fun getHeapGraphCount ()Ljava/lang/Integer;
	public fun getScenarioLoopsPerGraph ()I
	public fun getShortestPathTree ()Lshark/ShortestPathObjectNode;
	public fun getTraversalCount ()I
}

public final class shark/FlatteningPartitionedInstanceReferenceReader {
	public fun <init> (Lshark/HeapGraph;Lshark/FieldInstanceReferenceReader;)V
	public final fun read (Lshark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader;Lshark/HeapObject$HeapInstance;)Lkotlin/sequences/Sequence;
}

public abstract interface class shark/GcRootProvider {
	public abstract fun provideGcRoots (Lshark/HeapGraph;)Lkotlin/sequences/Sequence;
}

public final class shark/GcRootReference {
	public fun <init> (Lshark/GcRoot;ZLshark/LibraryLeakReferenceMatcher;)V
	public final fun getGcRoot ()Lshark/GcRoot;
	public final fun getMatchedLibraryLeak ()Lshark/LibraryLeakReferenceMatcher;
	public final fun isLowPriority ()Z
}

public abstract class shark/HeapAnalysis : java/io/Serializable {
	public static final field Companion Lshark/HeapAnalysis$Companion;
	public static final field DUMP_DURATION_UNKNOWN J
	public abstract fun getAnalysisDurationMillis ()J
	public abstract fun getCreatedAtTimeMillis ()J
	public abstract fun getDumpDurationMillis ()J
	public abstract fun getHeapDumpFile ()Ljava/io/File;
}

public final class shark/HeapAnalysis$Companion {
}

public final class shark/HeapAnalysisException : java/lang/RuntimeException {
	public static final field Companion Lshark/HeapAnalysisException$Companion;
	public fun <init> (Ljava/lang/Throwable;)V
	public fun toString ()Ljava/lang/String;
}

public final class shark/HeapAnalysisException$Companion {
}

public final class shark/HeapAnalysisFailure : shark/HeapAnalysis {
	public static final field Companion Lshark/HeapAnalysisFailure$Companion;
	public fun <init> (Ljava/io/File;JJJLshark/HeapAnalysisException;)V
	public synthetic fun <init> (Ljava/io/File;JJJLshark/HeapAnalysisException;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/io/File;
	public final fun component2 ()J
	public final fun component3 ()J
	public final fun component4 ()J
	public final fun component5 ()Lshark/HeapAnalysisException;
	public final fun copy (Ljava/io/File;JJJLshark/HeapAnalysisException;)Lshark/HeapAnalysisFailure;
	public static synthetic fun copy$default (Lshark/HeapAnalysisFailure;Ljava/io/File;JJJLshark/HeapAnalysisException;ILjava/lang/Object;)Lshark/HeapAnalysisFailure;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAnalysisDurationMillis ()J
	public fun getCreatedAtTimeMillis ()J
	public fun getDumpDurationMillis ()J
	public final fun getException ()Lshark/HeapAnalysisException;
	public fun getHeapDumpFile ()Ljava/io/File;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/HeapAnalysisFailure$Companion {
}

public final class shark/HeapAnalysisSuccess : shark/HeapAnalysis {
	public static final field Companion Lshark/HeapAnalysisSuccess$Companion;
	public fun <init> (Ljava/io/File;JJJLjava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
	public synthetic fun <init> (Ljava/io/File;JJJLjava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/io/File;
	public final fun component2 ()J
	public final fun component3 ()J
	public final fun component4 ()J
	public final fun component5 ()Ljava/util/Map;
	public final fun component6 ()Ljava/util/List;
	public final fun component7 ()Ljava/util/List;
	public final fun component8 ()Ljava/util/List;
	public final fun copy (Ljava/io/File;JJJLjava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Lshark/HeapAnalysisSuccess;
	public static synthetic fun copy$default (Lshark/HeapAnalysisSuccess;Ljava/io/File;JJJLjava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/util/List;ILjava/lang/Object;)Lshark/HeapAnalysisSuccess;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAllLeaks ()Lkotlin/sequences/Sequence;
	public fun getAnalysisDurationMillis ()J
	public final fun getApplicationLeaks ()Ljava/util/List;
	public fun getCreatedAtTimeMillis ()J
	public fun getDumpDurationMillis ()J
	public fun getHeapDumpFile ()Ljava/io/File;
	public final fun getLibraryLeaks ()Ljava/util/List;
	public final fun getMetadata ()Ljava/util/Map;
	public final fun getUnreachableObjects ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/HeapAnalysisSuccess$Companion {
}

public final class shark/HeapAnalyzer {
	public fun <init> (Lshark/OnAnalysisProgressListener;)V
	public final fun analyze (Ljava/io/File;Lshark/HeapGraph;Lshark/LeakingObjectFinder;Ljava/util/List;ZLjava/util/List;Lshark/MetadataExtractor;)Lshark/HeapAnalysis;
	public final fun analyze (Ljava/io/File;Lshark/LeakingObjectFinder;Ljava/util/List;ZLjava/util/List;Lshark/MetadataExtractor;Lshark/ProguardMapping;)Lshark/HeapAnalysis;
	public static synthetic fun analyze$default (Lshark/HeapAnalyzer;Ljava/io/File;Lshark/HeapGraph;Lshark/LeakingObjectFinder;Ljava/util/List;ZLjava/util/List;Lshark/MetadataExtractor;ILjava/lang/Object;)Lshark/HeapAnalysis;
	public static synthetic fun analyze$default (Lshark/HeapAnalyzer;Ljava/io/File;Lshark/LeakingObjectFinder;Ljava/util/List;ZLjava/util/List;Lshark/MetadataExtractor;Lshark/ProguardMapping;ILjava/lang/Object;)Lshark/HeapAnalysis;
}

public final class shark/HeapGrowthTraversal : shark/HeapTraversalOutput {
	public fun <init> (ILshark/ShortestPathObjectNode;Ljava/util/List;Lshark/HeapTraversalInput;)V
	public final fun getGrowingObjects ()Ljava/util/List;
	public fun getHeapGraphCount ()Ljava/lang/Integer;
	public fun getScenarioLoopsPerGraph ()I
	public fun getShortestPathTree ()Lshark/ShortestPathObjectNode;
	public fun getTraversalCount ()I
	public final fun isGrowing ()Z
	public fun toString ()Ljava/lang/String;
}

public abstract interface class shark/HeapTraversalInput {
	public abstract fun getHeapGraphCount ()Ljava/lang/Integer;
	public abstract fun getScenarioLoopsPerGraph ()I
	public abstract fun getTraversalCount ()I
}

public abstract interface class shark/HeapTraversalOutput : shark/HeapTraversalInput {
	public static final field Companion Lshark/HeapTraversalOutput$Companion;
	public abstract fun getShortestPathTree ()Lshark/ShortestPathObjectNode;
}

public final class shark/HeapTraversalOutput$Companion {
	public final fun getIgnoredReferences ()Ljava/util/List;
}

public final class shark/IgnoredReferenceMatcher : shark/ReferenceMatcher {
	public fun <init> (Lshark/ReferencePattern;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lshark/ReferencePattern;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getPattern ()Lshark/ReferencePattern;
	public fun getPatternApplies ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class shark/InitialState : shark/HeapTraversalInput {
	public fun <init> ()V
	public fun <init> (ILjava/lang/Integer;)V
	public synthetic fun <init> (ILjava/lang/Integer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getHeapGraphCount ()Ljava/lang/Integer;
	public fun getScenarioLoopsPerGraph ()I
	public fun getTraversalCount ()I
}

public final class shark/JavaLocalReferenceReader : shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader {
	public fun <init> (Lshark/HeapGraph;Ljava/util/List;)V
	public final fun getGraph ()Lshark/HeapGraph;
	public fun getReadsCutSet ()Z
	public fun matches (Lshark/HeapObject$HeapInstance;)Z
	public fun read (Lshark/HeapObject$HeapInstance;)Lkotlin/sequences/Sequence;
	public synthetic fun read (Lshark/HeapObject;)Lkotlin/sequences/Sequence;
}

public abstract class shark/JdkReferenceMatchers : java/lang/Enum, shark/ReferenceMatcher$ListBuilder {
	public static final field Companion Lshark/JdkReferenceMatchers$Companion;
	public static final field FINALIZER_WATCHDOG_DAEMON Lshark/JdkReferenceMatchers;
	public static final field MAIN Lshark/JdkReferenceMatchers;
	public static final field REFERENCES Lshark/JdkReferenceMatchers;
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun buildKnownReferences (Ljava/util/Set;)Ljava/util/List;
	public static final fun getDefaults ()Ljava/util/List;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static final fun ignoredInstanceField (Ljava/lang/String;Ljava/lang/String;)Lshark/IgnoredReferenceMatcher;
	public static final fun ignoredJavaLocal (Ljava/lang/String;)Lshark/IgnoredReferenceMatcher;
	public static fun valueOf (Ljava/lang/String;)Lshark/JdkReferenceMatchers;
	public static fun values ()[Lshark/JdkReferenceMatchers;
}

public final class shark/JdkReferenceMatchers$Companion {
	public final fun buildKnownReferences (Ljava/util/Set;)Ljava/util/List;
	public final fun getDefaults ()Ljava/util/List;
	public final fun ignoredInstanceField (Ljava/lang/String;Ljava/lang/String;)Lshark/IgnoredReferenceMatcher;
	public final fun ignoredJavaLocal (Ljava/lang/String;)Lshark/IgnoredReferenceMatcher;
}

public final class shark/JvmObjectGrowthDetectorKt {
	public static final fun forJvmHeap (Lshark/ObjectGrowthDetector$Companion;Ljava/util/List;)Lshark/ObjectGrowthDetector;
	public static synthetic fun forJvmHeap$default (Lshark/ObjectGrowthDetector$Companion;Ljava/util/List;ILjava/lang/Object;)Lshark/ObjectGrowthDetector;
}

public final class shark/KeyedWeakReferenceFinder : shark/LeakingObjectFinder {
	public static final field INSTANCE Lshark/KeyedWeakReferenceFinder;
	public fun findLeakingObjectIds (Lshark/HeapGraph;)Ljava/util/Set;
	public final fun heapDumpUptimeMillis (Lshark/HeapGraph;)Ljava/lang/Long;
}

public abstract class shark/Leak : java/io/Serializable {
	public static final field Companion Lshark/Leak$Companion;
	public abstract fun getLeakTraces ()Ljava/util/List;
	public abstract fun getShortDescription ()Ljava/lang/String;
	public abstract fun getSignature ()Ljava/lang/String;
	public final fun getTotalRetainedHeapByteSize ()Ljava/lang/Integer;
	public final fun getTotalRetainedObjectCount ()Ljava/lang/Integer;
	public fun toString ()Ljava/lang/String;
}

public final class shark/Leak$Companion {
}

public final class shark/LeakTrace : java/io/Serializable {
	public static final field Companion Lshark/LeakTrace$Companion;
	public fun <init> (Lshark/LeakTrace$GcRootType;Ljava/util/List;Lshark/LeakTraceObject;)V
	public final fun component1 ()Lshark/LeakTrace$GcRootType;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()Lshark/LeakTraceObject;
	public final fun copy (Lshark/LeakTrace$GcRootType;Ljava/util/List;Lshark/LeakTraceObject;)Lshark/LeakTrace;
	public static synthetic fun copy$default (Lshark/LeakTrace;Lshark/LeakTrace$GcRootType;Ljava/util/List;Lshark/LeakTraceObject;ILjava/lang/Object;)Lshark/LeakTrace;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getGcRootType ()Lshark/LeakTrace$GcRootType;
	public final fun getLeakingObject ()Lshark/LeakTraceObject;
	public final fun getReferencePath ()Ljava/util/List;
	public final fun getRetainedHeapByteSize ()Ljava/lang/Integer;
	public final fun getRetainedObjectCount ()Ljava/lang/Integer;
	public final fun getSignature ()Ljava/lang/String;
	public final fun getSuspectReferenceSubpath ()Lkotlin/sequences/Sequence;
	public fun hashCode ()I
	public final fun referencePathElementIsSuspect (I)Z
	public final fun toSimplePathString ()Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class shark/LeakTrace$Companion {
}

public final class shark/LeakTrace$GcRootType : java/lang/Enum {
	public static final field Companion Lshark/LeakTrace$GcRootType$Companion;
	public static final field JAVA_FRAME Lshark/LeakTrace$GcRootType;
	public static final field JNI_GLOBAL Lshark/LeakTrace$GcRootType;
	public static final field JNI_LOCAL Lshark/LeakTrace$GcRootType;
	public static final field JNI_MONITOR Lshark/LeakTrace$GcRootType;
	public static final field MONITOR_USED Lshark/LeakTrace$GcRootType;
	public static final field NATIVE_STACK Lshark/LeakTrace$GcRootType;
	public static final field STICKY_CLASS Lshark/LeakTrace$GcRootType;
	public static final field THREAD_BLOCK Lshark/LeakTrace$GcRootType;
	public static final field THREAD_OBJECT Lshark/LeakTrace$GcRootType;
	public final fun getDescription ()Ljava/lang/String;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/LeakTrace$GcRootType;
	public static fun values ()[Lshark/LeakTrace$GcRootType;
}

public final class shark/LeakTrace$GcRootType$Companion {
	public final fun fromGcRoot (Lshark/GcRoot;)Lshark/LeakTrace$GcRootType;
}

public final class shark/LeakTraceObject : java/io/Serializable {
	public static final field Companion Lshark/LeakTraceObject$Companion;
	public fun <init> (Lshark/LeakTraceObject$ObjectType;Ljava/lang/String;Ljava/util/Set;Lshark/LeakTraceObject$LeakingStatus;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;)V
	public final fun component1 ()Lshark/LeakTraceObject$ObjectType;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/util/Set;
	public final fun component4 ()Lshark/LeakTraceObject$LeakingStatus;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/Integer;
	public final fun component7 ()Ljava/lang/Integer;
	public final fun copy (Lshark/LeakTraceObject$ObjectType;Ljava/lang/String;Ljava/util/Set;Lshark/LeakTraceObject$LeakingStatus;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;)Lshark/LeakTraceObject;
	public static synthetic fun copy$default (Lshark/LeakTraceObject;Lshark/LeakTraceObject$ObjectType;Ljava/lang/String;Ljava/util/Set;Lshark/LeakTraceObject$LeakingStatus;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ILjava/lang/Object;)Lshark/LeakTraceObject;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClassName ()Ljava/lang/String;
	public final fun getClassSimpleName ()Ljava/lang/String;
	public final fun getLabels ()Ljava/util/Set;
	public final fun getLeakingStatus ()Lshark/LeakTraceObject$LeakingStatus;
	public final fun getLeakingStatusReason ()Ljava/lang/String;
	public final fun getRetainedHeapByteSize ()Ljava/lang/Integer;
	public final fun getRetainedObjectCount ()Ljava/lang/Integer;
	public final fun getType ()Lshark/LeakTraceObject$ObjectType;
	public final fun getTypeName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/LeakTraceObject$Companion {
}

public final class shark/LeakTraceObject$LeakingStatus : java/lang/Enum {
	public static final field LEAKING Lshark/LeakTraceObject$LeakingStatus;
	public static final field NOT_LEAKING Lshark/LeakTraceObject$LeakingStatus;
	public static final field UNKNOWN Lshark/LeakTraceObject$LeakingStatus;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/LeakTraceObject$LeakingStatus;
	public static fun values ()[Lshark/LeakTraceObject$LeakingStatus;
}

public final class shark/LeakTraceObject$ObjectType : java/lang/Enum {
	public static final field ARRAY Lshark/LeakTraceObject$ObjectType;
	public static final field CLASS Lshark/LeakTraceObject$ObjectType;
	public static final field INSTANCE Lshark/LeakTraceObject$ObjectType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/LeakTraceObject$ObjectType;
	public static fun values ()[Lshark/LeakTraceObject$ObjectType;
}

public final class shark/LeakTraceReference : java/io/Serializable {
	public static final field Companion Lshark/LeakTraceReference$Companion;
	public fun <init> (Lshark/LeakTraceObject;Lshark/LeakTraceReference$ReferenceType;Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Lshark/LeakTraceObject;
	public final fun component2 ()Lshark/LeakTraceReference$ReferenceType;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun copy (Lshark/LeakTraceObject;Lshark/LeakTraceReference$ReferenceType;Ljava/lang/String;Ljava/lang/String;)Lshark/LeakTraceReference;
	public static synthetic fun copy$default (Lshark/LeakTraceReference;Lshark/LeakTraceObject;Lshark/LeakTraceReference$ReferenceType;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lshark/LeakTraceReference;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getOriginObject ()Lshark/LeakTraceObject;
	public final fun getOwningClassName ()Ljava/lang/String;
	public final fun getOwningClassSimpleName ()Ljava/lang/String;
	public final fun getReferenceDisplayName ()Ljava/lang/String;
	public final fun getReferenceGenericName ()Ljava/lang/String;
	public final fun getReferenceName ()Ljava/lang/String;
	public final fun getReferenceType ()Lshark/LeakTraceReference$ReferenceType;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/LeakTraceReference$Companion {
}

public final class shark/LeakTraceReference$ReferenceType : java/lang/Enum {
	public static final field ARRAY_ENTRY Lshark/LeakTraceReference$ReferenceType;
	public static final field INSTANCE_FIELD Lshark/LeakTraceReference$ReferenceType;
	public static final field LOCAL Lshark/LeakTraceReference$ReferenceType;
	public static final field STATIC_FIELD Lshark/LeakTraceReference$ReferenceType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/LeakTraceReference$ReferenceType;
	public static fun values ()[Lshark/LeakTraceReference$ReferenceType;
}

public abstract interface class shark/LeakTracer {
	public abstract fun traceObjects (Ljava/util/Set;)Lshark/LeaksAndUnreachableObjects;
}

public abstract interface class shark/LeakTracer$Factory {
	public abstract fun createFor (Lshark/HeapGraph;)Lshark/LeakTracer;
}

public abstract interface class shark/LeakingObjectFinder {
	public abstract fun findLeakingObjectIds (Lshark/HeapGraph;)Ljava/util/Set;
}

public final class shark/LeaksAndUnreachableObjects {
	public fun <init> (Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()Ljava/util/List;
	public final fun copy (Ljava/util/List;Ljava/util/List;Ljava/util/List;)Lshark/LeaksAndUnreachableObjects;
	public static synthetic fun copy$default (Lshark/LeaksAndUnreachableObjects;Ljava/util/List;Ljava/util/List;Ljava/util/List;ILjava/lang/Object;)Lshark/LeaksAndUnreachableObjects;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getApplicationLeaks ()Ljava/util/List;
	public final fun getLibraryLeaks ()Ljava/util/List;
	public final fun getUnreachableObjects ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/LibraryLeak : shark/Leak {
	public static final field Companion Lshark/LibraryLeak$Companion;
	public fun <init> (Ljava/util/List;Lshark/ReferencePattern;Ljava/lang/String;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Lshark/ReferencePattern;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/util/List;Lshark/ReferencePattern;Ljava/lang/String;)Lshark/LibraryLeak;
	public static synthetic fun copy$default (Lshark/LibraryLeak;Ljava/util/List;Lshark/ReferencePattern;Ljava/lang/String;ILjava/lang/Object;)Lshark/LibraryLeak;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescription ()Ljava/lang/String;
	public fun getLeakTraces ()Ljava/util/List;
	public final fun getPattern ()Lshark/ReferencePattern;
	public fun getShortDescription ()Ljava/lang/String;
	public fun getSignature ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/LibraryLeak$Companion {
}

public final class shark/LibraryLeakReferenceMatcher : shark/ReferenceMatcher {
	public fun <init> (Lshark/ReferencePattern;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lshark/ReferencePattern;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lshark/ReferencePattern;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Lkotlin/jvm/functions/Function1;
	public final fun copy (Lshark/ReferencePattern;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lshark/LibraryLeakReferenceMatcher;
	public static synthetic fun copy$default (Lshark/LibraryLeakReferenceMatcher;Lshark/ReferencePattern;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lshark/LibraryLeakReferenceMatcher;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescription ()Ljava/lang/String;
	public fun getPattern ()Lshark/ReferencePattern;
	public fun getPatternApplies ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/MatchingGcRootProvider : shark/GcRootProvider {
	public fun <init> (Ljava/util/List;)V
	public fun provideGcRoots (Lshark/HeapGraph;)Lkotlin/sequences/Sequence;
}

public abstract interface class shark/MetadataExtractor {
	public static final field Companion Lshark/MetadataExtractor$Companion;
	public abstract fun extractMetadata (Lshark/HeapGraph;)Ljava/util/Map;
}

public final class shark/MetadataExtractor$Companion {
	public final fun getNO_OP ()Lshark/MetadataExtractor;
}

public final class shark/ObjectArrayReferenceReader : shark/ReferenceReader {
	public fun <init> ()V
	public fun read (Lshark/HeapObject$HeapObjectArray;)Lkotlin/sequences/Sequence;
	public synthetic fun read (Lshark/HeapObject;)Lkotlin/sequences/Sequence;
}

public final class shark/ObjectDominators {
	public fun <init> ()V
	public final fun buildDominatorTree (Lshark/HeapGraph;Ljava/util/List;)Ljava/util/Map;
	public final fun buildOfflineDominatorTree (Lshark/HeapGraph;Ljava/util/List;)Ljava/util/Map;
	public final fun renderDominatorTree (Lshark/HeapGraph;Ljava/util/List;ILjava/lang/String;Z)Ljava/lang/String;
	public static synthetic fun renderDominatorTree$default (Lshark/ObjectDominators;Lshark/HeapGraph;Ljava/util/List;ILjava/lang/String;ZILjava/lang/Object;)Ljava/lang/String;
}

public final class shark/ObjectDominators$DominatorNode : java/io/Serializable {
	public fun <init> (IIILjava/util/List;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()I
	public final fun component4 ()Ljava/util/List;
	public final fun copy (IIILjava/util/List;)Lshark/ObjectDominators$DominatorNode;
	public static synthetic fun copy$default (Lshark/ObjectDominators$DominatorNode;IIILjava/util/List;ILjava/lang/Object;)Lshark/ObjectDominators$DominatorNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDominatedObjectIds ()Ljava/util/List;
	public final fun getRetainedCount ()I
	public final fun getRetainedSize ()I
	public final fun getShallowSize ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ObjectDominators$OfflineDominatorNode : java/io/Serializable {
	public fun <init> (Lshark/ObjectDominators$DominatorNode;Ljava/lang/String;)V
	public final fun component1 ()Lshark/ObjectDominators$DominatorNode;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lshark/ObjectDominators$DominatorNode;Ljava/lang/String;)Lshark/ObjectDominators$OfflineDominatorNode;
	public static synthetic fun copy$default (Lshark/ObjectDominators$OfflineDominatorNode;Lshark/ObjectDominators$DominatorNode;Ljava/lang/String;ILjava/lang/Object;)Lshark/ObjectDominators$OfflineDominatorNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getNode ()Lshark/ObjectDominators$DominatorNode;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ObjectGrowthDetector {
	public static final field Companion Lshark/ObjectGrowthDetector$Companion;
	public fun <init> (Lshark/GcRootProvider;Lshark/ReferenceReader$Factory;)V
	public final fun findGrowingObjects (Lshark/CloseableHeapGraph;Lshark/HeapTraversalInput;)Lshark/HeapTraversalOutput;
	public static synthetic fun findGrowingObjects$default (Lshark/ObjectGrowthDetector;Lshark/CloseableHeapGraph;Lshark/HeapTraversalInput;ILjava/lang/Object;)Lshark/HeapTraversalOutput;
}

public final class shark/ObjectGrowthDetector$Companion {
}

public abstract interface class shark/ObjectInspector {
	public abstract fun inspect (Lshark/ObjectReporter;)V
}

public abstract class shark/ObjectInspectors : java/lang/Enum, shark/ObjectInspector {
	public static final field ANONYMOUS_CLASS Lshark/ObjectInspectors;
	public static final field CLASS Lshark/ObjectInspectors;
	public static final field CLASSLOADER Lshark/ObjectInspectors;
	public static final field Companion Lshark/ObjectInspectors$Companion;
	public static final field KEYED_WEAK_REFERENCE Lshark/ObjectInspectors;
	public static final field THREAD Lshark/ObjectInspectors;
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/ObjectInspectors;
	public static fun values ()[Lshark/ObjectInspectors;
}

public final class shark/ObjectInspectors$Companion {
	public final fun createLeakingObjectFilters (Ljava/util/Set;)Ljava/util/List;
	public final fun getJdkDefaults ()Ljava/util/List;
	public final fun getJdkLeakingObjectFilters ()Ljava/util/List;
}

public final class shark/ObjectReporter {
	public fun <init> (Lshark/HeapObject;)V
	public final fun getHeapObject ()Lshark/HeapObject;
	public final fun getLabels ()Ljava/util/LinkedHashSet;
	public final fun getLeakingReasons ()Ljava/util/Set;
	public final fun getNotLeakingReasons ()Ljava/util/Set;
	public final fun whenInstanceOf (Ljava/lang/String;Lkotlin/jvm/functions/Function2;)V
	public final fun whenInstanceOf (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function2;)V
}

public abstract interface class shark/OnAnalysisProgressListener {
	public static final field Companion Lshark/OnAnalysisProgressListener$Companion;
	public abstract fun onAnalysisProgress (Lshark/OnAnalysisProgressListener$Step;)V
}

public final class shark/OnAnalysisProgressListener$Companion {
	public final fun getNO_OP ()Lshark/OnAnalysisProgressListener;
}

public final class shark/OnAnalysisProgressListener$Step : java/lang/Enum {
	public static final field BUILDING_LEAK_TRACES Lshark/OnAnalysisProgressListener$Step;
	public static final field COMPUTING_NATIVE_RETAINED_SIZE Lshark/OnAnalysisProgressListener$Step;
	public static final field COMPUTING_RETAINED_SIZE Lshark/OnAnalysisProgressListener$Step;
	public static final field EXTRACTING_METADATA Lshark/OnAnalysisProgressListener$Step;
	public static final field FINDING_DOMINATORS Lshark/OnAnalysisProgressListener$Step;
	public static final field FINDING_PATHS_TO_RETAINED_OBJECTS Lshark/OnAnalysisProgressListener$Step;
	public static final field FINDING_RETAINED_OBJECTS Lshark/OnAnalysisProgressListener$Step;
	public static final field INSPECTING_OBJECTS Lshark/OnAnalysisProgressListener$Step;
	public static final field PARSING_HEAP_DUMP Lshark/OnAnalysisProgressListener$Step;
	public static final field REPORTING_HEAP_ANALYSIS Lshark/OnAnalysisProgressListener$Step;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getHumanReadableName ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lshark/OnAnalysisProgressListener$Step;
	public static fun values ()[Lshark/OnAnalysisProgressListener$Step;
}

public abstract class shark/OpenJdkInstanceRefReaders : java/lang/Enum, shark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader$OptionalFactory {
	public static final field ARRAY_LIST Lshark/OpenJdkInstanceRefReaders;
	public static final field CONCURRENT_HASH_MAP Lshark/OpenJdkInstanceRefReaders;
	public static final field COPY_ON_WRITE_ARRAY_LIST Lshark/OpenJdkInstanceRefReaders;
	public static final field HASH_MAP Lshark/OpenJdkInstanceRefReaders;
	public static final field HASH_SET Lshark/OpenJdkInstanceRefReaders;
	public static final field LINKED_LIST Lshark/OpenJdkInstanceRefReaders;
	public static final field WEAK_HASH_MAP Lshark/OpenJdkInstanceRefReaders;
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/OpenJdkInstanceRefReaders;
	public static fun values ()[Lshark/OpenJdkInstanceRefReaders;
}

public final class shark/OpenJdkReferenceReaderFactory : shark/ReferenceReader$Factory {
	public fun <init> (Ljava/util/List;)V
	public fun createFor (Lshark/HeapGraph;)Lshark/ReferenceReader;
}

public final class shark/PathFindingResults {
	public fun <init> (Ljava/util/List;Lshark/DominatorTree;)V
	public final fun getDominatorTree ()Lshark/DominatorTree;
	public final fun getPathsToLeakingObjects ()Ljava/util/List;
}

public final class shark/PrioritizingShortestPathFinder : shark/ShortestPathFinder {
	public synthetic fun <init> (Lshark/HeapGraph;Lshark/PrioritizingShortestPathFinder$Event$Listener;Lshark/ReferenceReader;Lshark/GcRootProvider;ZLkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun findShortestPathsFromGcRoots (Ljava/util/Set;)Lshark/PathFindingResults;
}

public abstract interface class shark/PrioritizingShortestPathFinder$Event {
}

public abstract interface class shark/PrioritizingShortestPathFinder$Event$Listener {
	public abstract fun onEvent (Lshark/PrioritizingShortestPathFinder$Event;)V
}

public final class shark/PrioritizingShortestPathFinder$Event$StartedFindingDominators : shark/PrioritizingShortestPathFinder$Event {
	public static final field INSTANCE Lshark/PrioritizingShortestPathFinder$Event$StartedFindingDominators;
}

public final class shark/PrioritizingShortestPathFinder$Event$StartedFindingPathsToRetainedObjects : shark/PrioritizingShortestPathFinder$Event {
	public static final field INSTANCE Lshark/PrioritizingShortestPathFinder$Event$StartedFindingPathsToRetainedObjects;
}

public final class shark/PrioritizingShortestPathFinder$Factory : shark/ShortestPathFinder$Factory {
	public fun <init> (Lshark/PrioritizingShortestPathFinder$Event$Listener;Lshark/ReferenceReader$Factory;Lshark/GcRootProvider;Z)V
	public fun createFor (Lshark/HeapGraph;)Lshark/ShortestPathFinder;
}

public final class shark/RealLeakTracerFactory : shark/LeakTracer$Factory {
	public fun <init> (Lshark/ShortestPathFinder$Factory;Ljava/util/List;Lshark/RealLeakTracerFactory$Event$Listener;)V
	public fun createFor (Lshark/HeapGraph;)Lshark/LeakTracer;
}

public abstract interface class shark/RealLeakTracerFactory$Event {
}

public abstract interface class shark/RealLeakTracerFactory$Event$Listener {
	public abstract fun onEvent (Lshark/RealLeakTracerFactory$Event;)V
}

public final class shark/RealLeakTracerFactory$Event$StartedBuildingLeakTraces : shark/RealLeakTracerFactory$Event {
	public static final field INSTANCE Lshark/RealLeakTracerFactory$Event$StartedBuildingLeakTraces;
}

public final class shark/RealLeakTracerFactory$Event$StartedComputingJavaHeapRetainedSize : shark/RealLeakTracerFactory$Event {
	public static final field INSTANCE Lshark/RealLeakTracerFactory$Event$StartedComputingJavaHeapRetainedSize;
}

public final class shark/RealLeakTracerFactory$Event$StartedComputingNativeRetainedSize : shark/RealLeakTracerFactory$Event {
	public static final field INSTANCE Lshark/RealLeakTracerFactory$Event$StartedComputingNativeRetainedSize;
}

public final class shark/RealLeakTracerFactory$Event$StartedInspectingObjects : shark/RealLeakTracerFactory$Event {
	public static final field INSTANCE Lshark/RealLeakTracerFactory$Event$StartedInspectingObjects;
}

public final class shark/Reference {
	public fun <init> (JZZLshark/Reference$LazyDetails$Resolver;)V
	public synthetic fun <init> (JZZLshark/Reference$LazyDetails$Resolver;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()J
	public final fun component2 ()Z
	public final fun component3 ()Z
	public final fun component4 ()Lshark/Reference$LazyDetails$Resolver;
	public final fun copy (JZZLshark/Reference$LazyDetails$Resolver;)Lshark/Reference;
	public static synthetic fun copy$default (Lshark/Reference;JZZLshark/Reference$LazyDetails$Resolver;ILjava/lang/Object;)Lshark/Reference;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLazyDetailsResolver ()Lshark/Reference$LazyDetails$Resolver;
	public final fun getValueObjectId ()J
	public fun hashCode ()I
	public final fun isLeafObject ()Z
	public final fun isLowPriority ()Z
	public fun toString ()Ljava/lang/String;
}

public final class shark/Reference$LazyDetails {
	public fun <init> (Ljava/lang/String;JLshark/ReferenceLocationType;Lshark/LibraryLeakReferenceMatcher;Z)V
	public final fun getLocationClassObjectId ()J
	public final fun getLocationType ()Lshark/ReferenceLocationType;
	public final fun getMatchedLibraryLeak ()Lshark/LibraryLeakReferenceMatcher;
	public final fun getName ()Ljava/lang/String;
	public final fun isVirtual ()Z
}

public abstract interface class shark/Reference$LazyDetails$Resolver {
	public abstract fun resolve ()Lshark/Reference$LazyDetails;
}

public final class shark/ReferenceLocationType : java/lang/Enum {
	public static final field ARRAY_ENTRY Lshark/ReferenceLocationType;
	public static final field INSTANCE_FIELD Lshark/ReferenceLocationType;
	public static final field LOCAL Lshark/ReferenceLocationType;
	public static final field STATIC_FIELD Lshark/ReferenceLocationType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lshark/ReferenceLocationType;
	public static fun values ()[Lshark/ReferenceLocationType;
}

public abstract class shark/ReferenceMatcher {
	public static final field Companion Lshark/ReferenceMatcher$Companion;
	public abstract fun getPattern ()Lshark/ReferencePattern;
	public abstract fun getPatternApplies ()Lkotlin/jvm/functions/Function1;
}

public final class shark/ReferenceMatcher$Companion {
	public final fun fromListBuilders (Ljava/util/Collection;)Ljava/util/List;
	public final fun getALWAYS ()Lkotlin/jvm/functions/Function1;
}

public abstract interface class shark/ReferenceMatcher$ListBuilder {
	public abstract fun add (Ljava/util/List;)V
}

public final class shark/ReferenceMatcherKt {
	public static final fun ignored (Lshark/ReferencePattern;Lkotlin/jvm/functions/Function1;)Lshark/IgnoredReferenceMatcher;
	public static synthetic fun ignored$default (Lshark/ReferencePattern;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lshark/IgnoredReferenceMatcher;
	public static final fun leak (Lshark/ReferencePattern;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lshark/LibraryLeakReferenceMatcher;
	public static synthetic fun leak$default (Lshark/ReferencePattern;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lshark/LibraryLeakReferenceMatcher;
}

public abstract class shark/ReferencePattern : java/io/Serializable {
	public static final field Companion Lshark/ReferencePattern$Companion;
}

public final class shark/ReferencePattern$Companion {
	public final fun instanceField (Ljava/lang/String;Ljava/lang/String;)Lshark/ReferencePattern$InstanceFieldPattern;
	public final fun javaLocal (Ljava/lang/String;)Lshark/ReferencePattern$JavaLocalPattern;
	public final fun nativeGlobalVariable (Ljava/lang/String;)Lshark/ReferencePattern$NativeGlobalVariablePattern;
	public final fun staticField (Ljava/lang/String;Ljava/lang/String;)Lshark/ReferencePattern$StaticFieldPattern;
}

public final class shark/ReferencePattern$InstanceFieldPattern : shark/ReferencePattern {
	public static final field Companion Lshark/ReferencePattern$InstanceFieldPattern$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lshark/ReferencePattern$InstanceFieldPattern;
	public static synthetic fun copy$default (Lshark/ReferencePattern$InstanceFieldPattern;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lshark/ReferencePattern$InstanceFieldPattern;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClassName ()Ljava/lang/String;
	public final fun getFieldName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ReferencePattern$InstanceFieldPattern$Companion {
}

public final class shark/ReferencePattern$JavaLocalPattern : shark/ReferencePattern {
	public static final field Companion Lshark/ReferencePattern$JavaLocalPattern$Companion;
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lshark/ReferencePattern$JavaLocalPattern;
	public static synthetic fun copy$default (Lshark/ReferencePattern$JavaLocalPattern;Ljava/lang/String;ILjava/lang/Object;)Lshark/ReferencePattern$JavaLocalPattern;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getThreadName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ReferencePattern$JavaLocalPattern$Companion {
}

public final class shark/ReferencePattern$NativeGlobalVariablePattern : shark/ReferencePattern {
	public static final field Companion Lshark/ReferencePattern$NativeGlobalVariablePattern$Companion;
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lshark/ReferencePattern$NativeGlobalVariablePattern;
	public static synthetic fun copy$default (Lshark/ReferencePattern$NativeGlobalVariablePattern;Ljava/lang/String;ILjava/lang/Object;)Lshark/ReferencePattern$NativeGlobalVariablePattern;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClassName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ReferencePattern$NativeGlobalVariablePattern$Companion {
}

public final class shark/ReferencePattern$StaticFieldPattern : shark/ReferencePattern {
	public static final field Companion Lshark/ReferencePattern$StaticFieldPattern$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lshark/ReferencePattern$StaticFieldPattern;
	public static synthetic fun copy$default (Lshark/ReferencePattern$StaticFieldPattern;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lshark/ReferencePattern$StaticFieldPattern;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClassName ()Ljava/lang/String;
	public final fun getFieldName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class shark/ReferencePattern$StaticFieldPattern$Companion {
}

public abstract interface class shark/ReferenceReader {
	public abstract fun read (Lshark/HeapObject;)Lkotlin/sequences/Sequence;
}

public abstract interface class shark/ReferenceReader$Factory {
	public abstract fun createFor (Lshark/HeapGraph;)Lshark/ReferenceReader;
}

public final class shark/RepeatingHeapGraphObjectGrowthDetector {
	public fun <init> (Lshark/ObjectGrowthDetector;)V
	public final fun findRepeatedlyGrowingObjects (Lshark/InitialState;Lkotlin/sequences/Sequence;)Lshark/HeapGrowthTraversal;
	public static synthetic fun findRepeatedlyGrowingObjects$default (Lshark/RepeatingHeapGraphObjectGrowthDetector;Lshark/InitialState;Lkotlin/sequences/Sequence;ILjava/lang/Object;)Lshark/HeapGrowthTraversal;
}

public final class shark/RepeatingHeapGraphObjectGrowthDetectorKt {
	public static final fun repeatingHeapGraph (Lshark/ObjectGrowthDetector;)Lshark/RepeatingHeapGraphObjectGrowthDetector;
}

public final class shark/RepeatingScenarioObjectGrowthDetector {
	public static final field Companion Lshark/RepeatingScenarioObjectGrowthDetector$Companion;
	public static final field DEFAULT_MAX_HEAP_DUMPS I
	public static final field DEFAULT_SCENARIO_LOOPS_PER_DUMP I
	public fun <init> (Lshark/HeapGraphProvider;Lshark/ObjectGrowthDetector;II)V
	public synthetic fun <init> (Lshark/HeapGraphProvider;Lshark/ObjectGrowthDetector;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun findRepeatedlyGrowingObjects (Lkotlin/jvm/functions/Function0;)Lshark/HeapGrowthTraversal;
}

public final class shark/RepeatingScenarioObjectGrowthDetector$Companion {
}

public final class shark/RepeatingScenarioObjectGrowthDetectorKt {
	public static final fun repeatingScenario (Lshark/ObjectGrowthDetector;Lshark/HeapGraphProvider;II)Lshark/RepeatingScenarioObjectGrowthDetector;
	public static synthetic fun repeatingScenario$default (Lshark/ObjectGrowthDetector;Lshark/HeapGraphProvider;IIILjava/lang/Object;)Lshark/RepeatingScenarioObjectGrowthDetector;
}

public abstract interface class shark/ShortestPathFinder {
	public abstract fun findShortestPathsFromGcRoots (Ljava/util/Set;)Lshark/PathFindingResults;
}

public abstract interface class shark/ShortestPathFinder$Factory {
	public abstract fun createFor (Lshark/HeapGraph;)Lshark/ShortestPathFinder;
}

public final class shark/ShortestPathObjectNode {
	public fun <init> (Ljava/lang/String;Lshark/ShortestPathObjectNode;Z)V
	public final fun copyResettingAsInitialTree ()Lshark/ShortestPathObjectNode;
	public final fun getChildren ()Ljava/util/List;
	public final fun getChildrenObjectCount ()I
	public final fun getChildrenObjectCountIncrease ()I
	public final fun getName ()Ljava/lang/String;
	public final fun getParent ()Lshark/ShortestPathObjectNode;
	public final fun getRetained ()Lshark/ShortestPathObjectNode$Retained;
	public final fun getRetainedIncrease ()Lshark/ShortestPathObjectNode$Retained;
	public final fun getRetainedIncreaseOrNull ()Lshark/ShortestPathObjectNode$Retained;
	public final fun getRetainedOrNull ()Lshark/ShortestPathObjectNode$Retained;
	public final fun getSelfObjectCount ()I
	public final fun getSelfObjectCountIncrease ()I
	public final fun pathFromRootAsString ()Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class shark/ShortestPathObjectNode$Retained {
	public synthetic fun <init> (JILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getHeapSize-UyN4wxk ()J
	public final fun getObjectCount ()I
}

public final class shark/VirtualizingMatchingReferenceReaderFactory : shark/ReferenceReader$Factory {
	public fun <init> (Ljava/util/List;Lshark/ChainingInstanceReferenceReader$VirtualInstanceReferenceReader$ChainFactory;)V
	public fun createFor (Lshark/HeapGraph;)Lshark/ReferenceReader;
}

public final class shark/internal/InternalSharkCollectionsHelper {
	public static final field INSTANCE Lshark/internal/InternalSharkCollectionsHelper;
	public final fun arrayListValues (Lshark/HeapObject$HeapInstance;)Lkotlin/sequences/Sequence;
}

public abstract class shark/internal/ReferencePathNode {
	public abstract fun getObjectId ()J
}

public final class shark/internal/ReferencePathNode$ChildNode : shark/internal/ReferencePathNode {
	public fun <init> (JLshark/internal/ReferencePathNode;Lshark/Reference$LazyDetails$Resolver;)V
	public final fun getLazyDetailsResolver ()Lshark/Reference$LazyDetails$Resolver;
	public fun getObjectId ()J
	public final fun getParent ()Lshark/internal/ReferencePathNode;
}

public abstract class shark/internal/ReferencePathNode$RootNode : shark/internal/ReferencePathNode {
	public abstract fun getGcRoot ()Lshark/GcRoot;
	public fun getObjectId ()J
}

public final class shark/internal/ReferencePathNode$RootNode$LibraryLeakRootNode : shark/internal/ReferencePathNode$RootNode {
	public fun <init> (Lshark/GcRoot;Lshark/LibraryLeakReferenceMatcher;)V
	public fun getGcRoot ()Lshark/GcRoot;
	public final fun getMatcher ()Lshark/LibraryLeakReferenceMatcher;
}

public final class shark/internal/ReferencePathNode$RootNode$NormalRootNode : shark/internal/ReferencePathNode$RootNode {
	public fun <init> (Lshark/GcRoot;)V
	public fun getGcRoot ()Lshark/GcRoot;
}

public final class shark/internal/ReferencePathNodeKt {
	public static final fun invalidObjectIdErrorMessage (Lshark/HeapGraph;Lshark/internal/ReferencePathNode;)Ljava/lang/String;
}

